<?php

/**
 * Drago Extension
 * Package built on Nette Framework
 */

declare(strict_types=1);

namespace Drago\Generator\Generator;

use Dibi\Exception;
use Drago\Generator\Base;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\Utils\FileSystem;
use Nette\Utils\Strings;
use Throwable;


/**
 * Generates entity class based on database schema.
 */
class EntityGenerator extends Base implements IGenerator
{
	/**
	 * Runs the generation process for a specific table or all tables.
	 *
	 * @param string|null $table The table name to generate for, or null for all tables.
	 * @throws Exception
	 * @throws Throwable
	 */
	public function runGeneration(?string $table = null): void
	{
		if ($table !== null) {
			$this->createPhpFile($table);
		} else {
			foreach ($this->repository->getTableNames() as $table) {
				$this->createPhpFile($table);
			}
		}
	}


	/**
	 * Creates a PHP file for a given table.
	 *
	 * @param string $table The table name to generate the class for.
	 * @throws Exception
	 * @throws Throwable
	 */
	public function createPhpFile(string $table): void
	{
		// Get options for the generator.
		$options = $this->options;

		// Create the class filename and add suffix.
		$name = $this->filename($table, $options->suffix);

		// Generate the class.
		$class = new ClassType($name);

		// Add final modifier if required.
		if ($options->final) {
			$class->setFinal();
		}

		// Add extends class if required.
		if ($options->extendsOn) {
			$class->setExtends($options->extends);
		}

		// Get references for the table.
		$references = $this->getReferencesTable($table);

		// Add the constant for table name.
		$tableName = $this->options->tableName ?? 'Table';
		$class->addConstant($tableName, $table)
			->setType('string')
			->setPublic();

		// Process each column from the table.
		foreach ($this->repository->getColumnNames($table) as $column) {

			// Convert column name to lowercase if required.
			if ($options->lower) {
				$column = Strings::lower($column);
			}

			// Validate column names.
			$this->validateColumn($table, $column);

			// Get column attributes.
			$attr = $this->repository->getColumn($table, $column);

			// Add constant for primary key if applicable.
			if ($attr->isAutoIncrement()) {
				$primaryKey = $this->options->primaryKey ?? 'Id';
				$class->addConstant($primaryKey, $column)
					->setType('string')
					->setPublic();
			}

			// Add constants for other columns.
			if ($options->constant) {
				$constant = $this->options->constantPrefix
					? $this->options->constantPrefix . $this->inflector->classify($column)
					: $this->inflector->classify($column);

				// Skip auto-increment columns for constant.
				if (!$attr->isAutoIncrement()) {
					$class->addConstant($constant, $column)
						->setType('string')
						->setPublic();
				}

				// Add constant for column size if required.
				if ($options->constantSize && !$attr->isAutoIncrement() && $attr->getSize() > 0) {
					$class->addConstant($constant . 'Size', $attr->getSize())
						->setType('integer')
						->setPublic();
				}
			}

			// Detect the column's native type.
			$detectType = $this->detectType($attr->getNativeType());

			// Add property for the column.
			$create = $class->addProperty($column)
				->setType($detectType)
				->setNullable($attr->isNullable())
				->setInitialized($attr->isNullable())
				->setPublic();

			// Add column info comments.
			if ($this->options->columnInfo) {
				if ($attr->isAutoIncrement()) {
					$create->addComment('Primary key');
				}

				if ($attr->getDefault()) {
					$create->addComment('Default value ' . $attr->getDefault());
				}

				if ($attr->getSize() > 0) {
					$create->addComment('Column size ' . $attr->getSize());
				}
			}

			// Add reference to another table if applicable.
			if ($options->references && isset($references[$column])) {
				$filename = $this->filename($references[$column], $options->suffix);
				$class->addProperty($references[$column])
					->setType($options->namespace . '\\' . $filename)
					->setComment('Table join references');
			}
		}

		// Generate the PHP file content.
		$file = new PhpFile;
		$file->addComment('This file was generated by Drago Generator.')
			->setStrictTypes()
			->addNamespace($options->namespace)
			->addUse('Drago')
			->add($class);

		// Write the generated PHP file to the filesystem.
		$path = $options->path . '/' . $name . '.php';
		FileSystem::write($path, $file->__toString());
	}
}
